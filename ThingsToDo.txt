https://github.com/PrismJS/prism/issues/1171
https://github.com/jsdom/jsdom

1. IsValidLanguageAlias(string languageAlias, Engine engine)
    - create languageAliases with the above function
    - create languageAliases factory
            - supply Dictionary<EngineType, lazy<string[]> to languageAliases



https://github.com/PrismJS/prism/blob/master/components.json


Requirements
- test hljs and code color
- flesh out engine options
- test options overriding
    - node services
    - syntax highlighter


- Integrate MSBuild.Yarn
    - install npm packages on first build or if they dissapear
    - how does nodeservices project install js?
- packaging
    - name for wrapper folder (something unique)
- write readme
- publish on nuget

- blog post on Running JS from CSharp
    - use https://github.com/aspnet/JavaScriptServices/tree/dev/src/Microsoft.AspNetCore.NodeServices
        - why not https://github.com/tjanczuk/edge?
            - how it works
                - node is a c++ dll
                - simply pinvokes node
                - this makes it more performant, especially for object marshalling
            - however does not support .net core
            - moreover, nodeServices is an abstraction over node usage
                - by default uses json and http for object marshalling
                - intends to add edge.js when it supports .net core
        - exception handling
    - debugging
        - chrome://inspect
        - https://github.com/aspnet/JavaScriptServices/tree/dev/src/Microsoft.AspNetCore.SpaServices#debugging-your-javascripttypescript-code-when-it-runs-on-the-server
    - use MSBuild.Yarn
        - easier to clone and get started with source code
    - packaging
        - append name and copy node_modules and interop to output